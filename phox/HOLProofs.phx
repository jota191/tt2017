(*Use nat.*)

(* The first thing we do is define a sort for the naturals*)
Sort nat.

(* Define constants for 0 and suc*)

Cst O : nat.
Cst Prefix[2] "S" x : nat -> nat.

(* Definition of Naturals as usual in HOL*)
def N x = /\X (X O -> (/\y (X y -> X (S y))) -> X x).

(* The two axioms of naturals in HOL*)

claim O_neq_S /\x:N (O != S x).
claim S_inj /\x:N /\y:N (S x = S y -> x = y).

(* These are the excercises in the notes, (not in the same order) *)


fact O_in_N N O.
intros.
axiom H.
save.

fact N_then_SN /\x (N x -> N (S x)).
intros.
intros.
elim H.
elim H1 with O.
axiom H0.
intros.
elim H1 with S y.
axiom H2.
save. (*revisar, estoy haciendo cosas demÃ¡s*)


(*induction principle over Nat*)
fact ind_N 
 /\P (P O -> /\y:N (P y -> P (S y)) -> /\x:N P x).
intros.
elim -1 [r] N x & P x. (*what the hack*)
elim H1.

trivial.
trivial.

save.

new_elim -n N ind ind_N.

(*Addition*)

(* I'll define Addition by axioms, since for the excercises of
proving conmmutativity, associativity and distributivity, this rules
are already proved (althought definite description is used to define
operations)
If I have time I'll redefine operations
*)

Cst lInfix[3.5] x "+" y : nat -> nat -> nat.
(*axiom axioms defining addition  *)
claim add_O_N /\y:N (O + y = y).
claim add_S_N /\x,y:N ((S x) + y = S (x + y)).

(*conmutativity*)

theorem add_conm /\x,y:N (x + y = y + x).
intros.
elim H.
elim H0.
trivial.
elim add_O_N with y0.
